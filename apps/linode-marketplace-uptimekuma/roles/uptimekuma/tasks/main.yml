---
- name: install prereqs 
  apt:
    name: 
      - expect
      - sqlite3
    state: present

- name: create docker volume
  docker_volume:
    name: "uptime-kuma"

- name: run uptimekuma docker container
  docker_container:
    name: uptime-kuma
    image: louislam/uptime-kuma:1
    restart_policy: always
    state: started
    volumes:
      - "uptime-kuma:/app/data"
    ports:
      - "127.0.0.1:3001:3001"

- name: gather docker logs to ensure app is created
  command: 
    cmd: |
      docker logs uptime-kuma
  register: docker_logs
  until: "'[SERVER] INFO: Connected' in docker_logs.stdout"
  retries: 5
  delay: 10
  failed_when: false
  changed_when: false

- name: fail if the app isn't connected
  fail:
    msg: "The log '[SERVER] INFO: Connected' was not found within the allowed retries."
  when: "'[SERVER] INFO: Connected' not in docker_logs.stdout"

- name: continue once app is ready
  debug:
    msg: "Found '[SERVER] INFO: Connected' in logs. Continuing with the next task."
  when: "'[SERVER] INFO: Connected' in docker_logs.stdout"

# uptime-kuma user creation
- name: execute sql command in docker container
  command:
    cmd: |
      docker exec uptime-kuma sqlite3 data/kuma.db "INSERT INTO user (id, username, password, active, timezone, twofa_secret, twofa_status, twofa_last_token) VALUES (1, '{{ kuma_user_name }}', NULL, 1, NULL, NULL, 0, NULL);"

- name: run npm run reset-password for uptime kuma
  expect:
    command: "docker exec -it uptime-kuma npm run reset-password"
    responses:
      'New Password': '{{ kuma_password }}'
      'Confirm New Password': '{{ kuma_password }}' 
    timeout: 30

- name: restart the docker container
  docker_container:
    name: uptime-kuma
    restart: true

# Nginx
- name: install nginx
  apt:
    pkg:
      - nginx
    state: present

- name: config file setup
  template:
    src: templates/nginx.conf.j2
    dest: "/etc/nginx/sites-available/{{ _domain }}"    

- name: create a symbolic link for the nginx configuration
  file:
    src: "/etc/nginx/sites-available/{{ _domain }}"
    dest: "/etc/nginx/sites-enabled/{{ _domain }}"
    state: link

- name: unlink the default nginx configuration
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: reload nginx service

# ssl_certbot
- name: setting up ssl certificate
  import_role:
    name: certbot_ssl