---
- name: install prereqs 
  apt:
    name: 
      - expect
      - sqlite3
    state: present

- name: create docker volume
  docker_volume:
    name: "uptime-kuma"

- name: run uptimekuma docker container
  docker_container:
    name: uptime-kuma
    image: louislam/uptime-kuma:1
    restart_policy: always
    state: started
    volumes:
      - "uptime-kuma:/app/data"
    ports:
      - "127.0.0.1:3001:3001"

- name: wait for uptime-kuma container to be ready
  community.docker.docker_container_info:
    name: uptime-kuma
  register: container_info
  until: container_info.container.State.Status == 'running'
  retries: 5
  delay: 10

#- name: execute SQL command in Docker container
#  shell: docker exec uptime-kuma sqlite3 /app/data/kuma.db "INSERT INTO user (id, username, password, active, timezone, twofa_secret, twofa_status, twofa_last_token) VALUES (1, '{{ kuma_user_name }}', NULL, 1, NULL, NULL, 0, NULL);"
- name: execute sql command in Docker container using sqlite3
  community.docker.docker_container:
    name: uptime-kuma
    command: >
     sqlite3 /data/kuma.db "INSERT INTO user (id, username, password, active, timezone, twofa_secret, twofa_status, twofa_last_token) VALUES (1, '{{ kuma_user_name }}', NULL, 1, NULL, NULL, 0, NULL);"

- name: restart uptime-kuma container
  community.docker.docker_container:
    name: uptime-kuma
    state: restarted

- name: wait for uptime-kuma container to be ready after insert
  community.docker.docker_container_info:
    name: uptime-kuma
  register: container_info
  until: container_info.container.State.Status == 'running'
  retries: 5
  delay: 10

- name: run npm run reset-password for uptime kuma
  expect:
    command: "docker exec -it uptime-kuma npm run reset-password"
    responses:
      'New Password': '{{ kuma_password }}'
      'Confirm New Password': '{{ kuma_password }}' 
    timeout: 30

- name: restart the docker container
  docker_container:
    name: uptime-kuma
    state: restarted 

# Nginx
- name: install nginx
  apt:
    pkg:
      - nginx
    state: present

- name: config file setup
  template:
    src: templates/nginx.conf.j2
    dest: "/etc/nginx/sites-available/{{ _domain }}"    

- name: create a symbolic link for the nginx configuration
  file:
    src: "/etc/nginx/sites-available/{{ _domain }}"
    dest: "/etc/nginx/sites-enabled/{{ _domain }}"
    state: link

- name: unlink the default nginx configuration
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: reload nginx service

# ssl_certbot
- name: setting up ssl certificate
  import_role:
    name: certbot_ssl
