# certbot dry-runs
- name: set stack variable based on webserver_stack
  set_fact:
    webserver: >-
      {{ 'apache' if webserver_stack == 'lamp'
         else 'nginx' if webserver_stack == 'lemp'
         else 'standalone' if webserver_stack == 'standalone' }}

- name: run dry-run for subdomain
  shell:
    cmd: "certbot -n --{{ webserver }} --agree-tos --dry-run --redirect certonly -d {{ subdomain }}.{{ domain }} -m {{ soa_email_address }}"
  register: dry_run
  until: dry_run is not failed
  retries: 3
  delay: 3
  ignore_errors: true
  when: 
    - domain is defined
    - subdomain != 'www' 

- name: run dry-run for tld and default subdomain
  shell:
    cmd: "certbot -n --{{ webserver }} --agree-tos --dry-run --redirect certonly -d {{ domain }} -d {{ subdomain }}.{{ domain }} -m {{ soa_email_address }}"
  register: dry_run
  until: dry_run is not failed
  retries: 3
  delay: 3
  ignore_errors: true
  when:
    - domain is defined
    - subdomain == 'www' 

- name: run dry-run for default domain
  shell:
    cmd: "certbot -n --{{ webserver }} --agree-tos --dry-run --redirect certonly -d {{ default_dns }} -m {{ soa_email_address }}"
  register: dry_run
  until: dry_run is not failed
  retries: 3
  delay: 3
  ignore_errors: true
  when: default_dns is defined

# assert that we can get valid certs. Otherwise fail - can't achieve final state
- name: validate certbot dry-run
  assert:
    that: dry_run is not failed
    fail_msg: "[Error] Certbot dry-run domain. Please check /var/log/letsencrypt/letsencrypt.log"
    success_msg: "[Info] Certbot dry-run successful!"
  run_once: true
