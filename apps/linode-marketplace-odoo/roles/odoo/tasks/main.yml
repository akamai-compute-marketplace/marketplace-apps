---
- name: create docker Volume
  docker_volume:
    name: "odoo-db"

- name: create docker volume
  docker_volume:
    name: "odoo-data"

- name: run postgres docker container
  docker_container:
    name: db
    image: postgres:13
    restart_policy: always
    state: started
    volumes:
      - "odoo-db:/var/lib/postgresql/data"
    env:
      POSTGRES_USER: "odoo"
      POSTGRES_PASSWORD: "{{ postgres_password }}"
      POSTGRES_DB: "postgres"

- name: run odoo docker container
  docker_container:
    name: odoo
    image: odoo
    restart_policy: always
    state: started
    links:
    - "db:db"
    ports:
    - "8069:8069"
    volumes:
      - "odoo-data:/var/lib/odoo"
    env:
      POSTGRES_USER: "odoo"
      POSTGRES_PASSWORD: "{{ postgres_password }}"
      POSTGRES_DB: "postgres"

- name: nginx reverse Setup
  block:
  - name: setup fqnd as default_dns
    set_fact:
      fqdn: "{{ default_dns }}"
    when: default_dns is defined

  - name: setup fqnd as subdomain.domain
    set_fact:
      fqdn: "{{ subdomain }}.{{ domain }}"
    when: subdomain is defined and domain is defined

  - name: install nginx
    apt:
      pkg:
      - nginx
      state: present

  - name: config file setup
    template:
      src: nginx.conf
      dest: "/etc/nginx/sites-available/{{ fqdn }}"      

  - name: create a symbolic link for the nginx configuration
    file:
      src: "/etc/nginx/sites-available/{{ fqdn }}"
      dest: "/etc/nginx/sites-enabled/{{ fqdn }}"
      state: link

  - name: unlink the default nginx configuration
    file:
      path: "/etc/nginx/sites-enabled/default"
      state: absent

  - name: test nginx configuration
    command: nginx -t
    notify:
    - reload nginx service
    
