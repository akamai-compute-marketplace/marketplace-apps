# FileCloud installation
- name: Adding Keys for MongoDB
  get_url:
      url: https://pgp.mongodb.com/server-7.0.asc
      dest: /usr/share/keyrings/mongodb-server-7.0.asc
      mode: '0644'
      force: true 

- name: adding mongodb repo
  apt_repository:
    repo: "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.asc ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse"
    state: present

- name: Installing MongoDB and updating cache
  apt:
    name: mongodb-org
    state: present
    update_cache: yes

- name: Adding Keys for FileCloud
  get_url:
      url: https://repo.filecloudlabs.com/static/pgp/filecloud.asc
      dest: /usr/share/keyrings/filecloud.asc
      mode: '0644'
      force: true

- name: adding filecloud repo
  apt_repository:
    repo: "deb [ arch=amd64 signed-by=/usr/share/keyrings/filecloud.asc ] https://repo.filecloudlabs.com/apt/ubuntu jammy/filecloud/23.242 main"
    state: present

- name: running apt-get update
  apt:
    update_cache: yes
    upgrade: yes

- name: Installing Apache.
  apt:
    name:
    - apache2
    - pigz
    state: present

- name: Installing PHP 8.3 and dependencies
  apt:
    name:
    - php8.3
    - php8.3-bcmath 
    - php8.3-cli 
    - php8.3-igbinary 
    - php8.3-common 
    - php8.3-curl 
    - php8.3-gd 
    - php8.3-gmp 
    - php8.3-imap 
    - php8.3-intl 
    - php8.3-ldap 
    - php8.3-mbstring 
    - php8.3-memcache 
    - php8.3-memcached 
    - php8.3-mongodb 
    - php8.3-opcache 
    - php8.3-readline 
    - php8.3-soap 
    - php8.3-xml 
    - php8.3-xsl 
    - php8.3-zip 
    - php8.3-sqlite3 
    - php-json 
    - libapache2-mod-security2
    
- name: Installing FileCloud! :)
  shell:
    cmd: ACCEPT_EULA=Y  apt-get install filecloud -y  

# reset admin password
- name: run PHP script to reset admin password
  command: 'php resetadminpw.php -p "{{ filecloud_admin_password }}"'
  args:
    chdir: '/var/www/html/resources/backup/'

# configure filecloud
- name: logging into filecloud
  uri:
    url: http://{{ ansible_default_ipv4.address }}/admin/adminlogin?adminuser=admin&adminpassword={{ filecloud_admin_password }}
    method: GET
    body_format: form-urlencoded
    status_code: 200
    force_basic_auth: yes
  register: login_cookies

- name: saving cookies to variable
  set_fact:
    login: "{{ login_cookies.cookies }}"

- name: extracting tonidocloud_ah value
  set_fact:
    tonidocloud_ah: "{{ login['tonidocloud-ah'] }}"

- name: extracting tonidocloud_as value
  set_fact:
    tonidocloud_as: "{{ login['tonidocloud-as'] }}"

- name: extracting x_xsrf_token value
  set_fact:
    x_xsrf_token: "{{ login['X-XSRF-TOKEN'] }}"

- name: configuring GEO IP
  uri:
    url: http://{{ ansible_default_ipv4.address }}/admin/
    method: POST
    headers:
      Content-Type: application/x-www-form-urlencoded
      Cookie: X-XSRF-TOKEN-admin={{ x_xsrf_token }}; X-XSRF-TOKEN={{ x_xsrf_token }}; tonidocloud-au=admin; tonidocloud-as={{ tonidocloud_as }}; tonidocloud-ah={{ tonidocloud_ah }}; tonidocloud-ah={{ tonidocloud_ah }}; tonidocloud-as={{ tonidocloud_as }}; tonidocloud-au=admin
    body_format: form-urlencoded
    body:
      op: "setconfigsetting"
      count: "1"
      param0: "TONIDOCLOUD_GEOIP_ENABLED"
      value0: "1"

# Apache ssl
- name: stop apache2
  systemd:
    name: apache2
    state: stopped

- name: setting up ssl certificate
  import_role:
    name: certbot_ssl

- name: moving vhost template
  template:
    src: templates/vhost.j2
    dest: "/etc/apache2/sites-available/{{ _domain }}.conf"
    owner: root
    group: root
    mode: 0644

- name: symlinking our vhost
  file:
    src: "/etc/apache2/sites-available/{{ _domain }}.conf"
    dest: "/etc/apache2/sites-enabled/{{ _domain }}.conf"
    owner: root
    group: root
    mode: 0644
    state: link

- name: disable apache default site
  file:
    path: /etc/apache2/sites-enabled/000-default.conf
    state: absent
  notify: start apache2